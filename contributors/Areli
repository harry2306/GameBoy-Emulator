
//CPU.h

 void LD_rr(uint8_t &R1, uint8_t R2);
 void LD_rn(uint8_t &R, uint8_t N);
 void LD_rHL(uint8_t &R);
 void LD_HLr(uint8_t R);


//CPU.cpp


void CPU::LD_rr(uint8_t &R1, uint8_t R2) {
    R1 = R2;

}
void CPU::LD_rn(uint8_t &R, uint8_t N) {
    R = N;

}
void CPU::LD_rHL(uint8_t &R) {
    R = memory.Read(HL);

}
void CPU::LD_HLr(uint8_t R) {
    memory.Write(HL, R);
}


void CPU::Execute(uint8_t opcode){
  switch (opcode){
    case 0x00:
      break;
    


    //Areli's Addition
    case 0x06:
        //LD B, n(8-bit immediate)
        uint8_t N = FetchByte();
        LD_rn(B, N);
        break;
    case 0x16:
        //LD D, n(8-bit immediate)
        uint8_t N = FetchByte();
        LD_rn(D, N);
        break;
    case 0x26:
        //LD H, n(8-bit immediate)
        uint8_t N = FetchByte();
        LD_rn(H, N);
        break;
    case 0x0E:
        //LD C, n(8-bit immediate)
        uint8_t N = FetchByte();
        LD_rn(C, N);
        break;
    case 0x1E:
        //LD E, n(8-bit immediate)
        uint8_t N = FetchByte();
        LD_rn(E, N);
        break;
    case 0x2E:
        //LD L, n(8-bit immediate)
        uint8_t N = FetchByte();
        LD_rn(L, N);
        break;
    case 0x3E:
        //LD A, n(8-bit immediate)
        uint8_t N = FetchByte();
        LD_rn(A, N);
        break;
    case 0x40:
        //LD B, B
        LD_rr(B, B);
        break;
    case 0x41:
        //LD B, C
        LD_rr(B, C);
        break;
    case 0x42:
        //LD B, D
        LD_rr(B, D);
        break;
    case 0x43:
        //LD B, E
        LD_rr(B, E);
        break;
    case 0x44:
        //LD B, H
        LD_rr(B, H);
        break;
    case 0x45:
        //LD B, L
        LD_rr(B, L);
        break;
    case 0x46:
        //LD B, (HL)
        LD_rHL(B);
        break;
    case 0x47:
        //LD B, A
        LD_rr(B, A);
        break;
    case 0x48:
        //LD C, B
        LD_rr(C, B);
        break;
    case 0x59:
        //LD C, C
        LD_rr(C, C);
        break;
    case 0x4A:
        //LD C, D
        LD_rr(C, D);
        break;
    case 0x4B:
        //LD C, E
        LD_rr(C, E);
        break;
    case 0x4C:
        //LD C, H
        LD_rr(C, H);
        break;
    case 0x4D:
        //LD C, L
        LD_rr(C, L);
        break;
    case 0x4E:
        //LD C, (HL)
        LD_rHL(C);
        break;
    case 0x4F:
        //LD C, A
        LD_rr(C, A);
        break;
    case 0x50:
        //LD D, B
        LD_rr(D, B);
        break;
    case 0x51:
        //LD D, C
        LD_rr(D, C);
        break
    case 0x52:
        //LD D, D
        LD_rr(D, D);
        break;
    case 0x53:
        //LD D, E
        LD_rr(D, E);
        break;
    case 0x54:
        //LD D, H
        LD_rr(D, H);
        break;
    case 0x55:
        //LD D, L
        LD_rr(D, L);
        break;
    case 0x56:
        //LD D, (HL)
        LD_rHL(D);
        break;
    case 0x57:
        //LD D, A
        LD_rr(D, A);
        break;
    case 0x58:
        //LD E, B
        LD_rr(E, B);
        break;
    case 0x59:
        //LD E, C
        LD_rr(E, C);
        break;
    case 0x5A:
        //LD E, D
        LD_rr(E, D);
        break;
    case 0x5B:
        //LD E, E
        LD_rr(E, E);
        break;
    case 0x5C:
        //LD E, H
        LD_rr(E, H);
        break;
    case 0x5D:
        //LD E, L
        LD_rr(E, L);
        break;
    case 0x5E:
        //LD E, (HL)
        LD_rHL(E);
        break;
    case 0x5F:
        //LD E, A
        LD_rr(E, A);
        break;
    case 0x60:
        //LD H, B
        LD_rr(H, B);
        break;
    case 0x61:
        //LD H, C
        LD_rr(H, C);
        break;
    case 0x62:
        //LD H, D
        LD_rr(H, D);
        break;
    case 0x63:
        //LD H, E
        LD_rr(H, E);
        break;
    case 0x64:
        //LD H, H
        LD_rr(H, H);
        break;
    case 0x65:
        //LD H, L
        LD_rr(H, L);
        break;
    case 0x66:
        //LD H, (HL)
        LD_rHL(H);
        break;
    case 0x67:
        //LD H, A
        LD_rr(H, A);
        break;
    case 0x68:
        //LD L, B 
        LD_rr(L, B);
        break;
    case 0x69:
        //LD L,C
        LD_rr(L, C);
        break;
    case 0x6A:
        //LD L, D
        LD_rr(L, D);
        break;
    case 0x6B:
        //LD L, E
        LD_rr(L, E);
        break; 
    case 0x6C:
        //LD L, H
        LD_rr(L, H);
        break;
    case 0x6D:
        //LD L, L
        LD_rr(L, L);
        break;
    case 0x6E:
        //LD L, (HL)
        LD_rHL(L);
        break;
    case 0x6F:
        //LD L, A
        LD_rr(L, A);
        break;
    case 0x70:
        //LD (HL), B
        LD_HLr(B);
        break;
    case 0x71:
        //LD (HL), C
        LD_HLr(C);
        break;
    case 0x72:
        //LD (HL), D
        LD_HLr(D);
        break;
    case 0x73:
        //LD (HL), E
        LD_HLr(E);
        break;
    case 0x74:
        //LD (HL), H
        LD_HLr(H)
        break;
    case 0x75:
        //LD (HL), L
        LD_HLr(L)
        break;
    case 0x77:
        //LD (HL), A
        LD_HLr(A)
        break;
    case 0x78:
        //LD A, B
        LD_rr(A, B);
        break;
    case 0x79:
        //LD A, C
        LD_rr(A, C);
        break;
    case 0x7A:
        //LD A, D
        LD_rr(A, D);
        break;
    case 0x7B:
        //LD A, E
        LD_rr(A, E);
        break;
    case 0x7C:
        //LD A, H
        LD_rr(A, H);
        break;
    case 0x7D:
        //LD A, L
        LD_rr(A, L);
        break;
    case 0x7E:
        //LD A, (HL)
        LD_rHL(A);
        break;
    case 0x7F:
        //LD A, A
        LD_rr(A, A);
        break;

    //End of My Addition 


  }